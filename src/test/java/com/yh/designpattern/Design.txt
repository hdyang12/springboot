简单工厂模式
策略模式:将算法分别封装起来,让它们之间可以互相替换,此模式让算法的变化,不会影响到使用算法的客户。
单一职责原则:就一个类而言,应该仅有一个引起它变化的原因
★开放-封闭原则:软件实体(类,模块,函数等等)应该可以扩展,但是不可修改。
★依赖倒转原则:高层模块不应该依赖低层模块,两个都应该依赖抽象。抽象不应该依赖细节,细节应该依赖抽象。
里氏代换原则:子类型必须能够替换掉它们的父类型。
装饰模式:动态地给一个对象添加一些额外的职责。 Decorator模式相比生成子类更为灵活。该模式以对客户端透明的方式扩展对象的功能。
代理模式:为其他对象提供一种代理以控制对这个对象的访问。
工厂方法模式:定义一个用于创建对象的接口,让子类决定实例化哪一个类(简单工厂模式有case判断逻辑,增加类型需要多处改动,违背了开放-封闭原则;工厂模式直接A a = new A1();只需改动一处即可)
原型模式:用原型实例指定创建对象的种类,并且通过拷贝这些原型创建新的对象。
模板方法模式:定义一个操作中的算法的骨架,而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
迪米特法则:如果两个类不必彼此直接通信,那么这两个类就不应当发生直接的相互作用。如果一个类需要调用另一个类的某个方法的话在,可以通过第三者转发这个调用。
外观模式:为子系统中的一组接口提供一个一致的界面,此模式定义了一个高层接口,这个接口使得这一子系统更加容易使用。完美地体现了依赖倒转原则和迪米特法则的思想。
建造者模式:将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的表示。
观察者模式(发布-订阅模式):定义了一种一对多的依赖关系,让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时,会通知所有观察者对象,使它们能够自动更新自己。
抽象工厂模式:提供一个创建一系列相关或相互依赖对象的接口,而无需指定它们具体的类。
状态模式:把状态的判断逻辑转移到表示不同状态的一系列类当中,可以把复杂的判断逻辑简化。
适配器模式:将一个类的接口转换成客户希望的另外一个接口,Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
备忘录模式
组合模式:将对象组合成树形结构以表示'部分-整体'的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。
迭代器模式:提供一种方法顺序访问一个聚合对象中各个元素,而又不暴露该对象的内部表示。此模式现在基本用不到了,很多编程语言都把该模式做在语言中了。
单例模式:保证一个类仅有一个实例,并提供一个访问它的全局访问点。
桥接模式:将抽象部分与它的实现部分分离,使它们都可以独立地变化。
命令模式:将一个请求封装为一个对象,从而使你可用不同的请求对客户进行参数化;对请求排队或记录请求日志,以及支持可撤销的操作。
职责链模式:使多个对象都有机会处理请求,从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链,并沿着这条链传递该请求,直到有一个对象处理它为止。
中介者模式:用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用,从而使其耦合松散,而且可以独立地改变它们之间的交互。
享元模式:运用共享技术有效地支持大量细粒度的对象。
解释器模式:给定一个语言,定义它的文法的一种表示,并定义一个解释器,这个解释器使用该表示来解释语言中的句子。
访问者模式:表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。
